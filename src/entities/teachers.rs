//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use validator::Validate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "teachers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub email: String,
    pub occupation: String,
}

#[derive(Deserialize,Validate)]
pub struct TeacherPassLess{
    #[validate(email)]
    pub email: String,
    pub firstname: String,
    pub secondname: String,
    pub lastname: String,
    pub occupation: String,
}
#[derive(Deserialize,Validate)]
pub struct Teacher{
    #[validate(email)]
    pub email: String,
    pub password: String,
    pub firstname: String,
    pub secondname: String,
    pub lastname: String,
    pub occupation: String,
}

#[derive(Deserialize,Validate)]
pub struct TeacherId{
    #[validate(email)]
    pub email: String
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::subjects::Entity")]
    Subjects,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Email",
        to = "super::users::Column::Email",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::subjects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subjects.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
