//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use validator::Validate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize,Validate)]
#[sea_orm(table_name = "meetings")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    pub subject_id: i32,
    pub name: String,
    pub time: DateTime,
}


#[derive(Clone,Deserialize,Validate,DeriveIntoActiveModel)]
pub struct ModelIdLess{
    pub subject_id: i32,
    pub name: String,
    pub time: DateTime
}
#[derive(Clone,Deserialize,Validate,DeriveIntoActiveModel)]
pub struct ModelId{
    pub id: i32
}




#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attended_meetings::Entity")]
    AttendedMeetings,
    #[sea_orm(
        belongs_to = "super::subjects::Entity",
        from = "Column::SubjectId",
        to = "super::subjects::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Subjects,
}

impl Related<super::attended_meetings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttendedMeetings.def()
    }
}

impl Related<super::subjects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subjects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
