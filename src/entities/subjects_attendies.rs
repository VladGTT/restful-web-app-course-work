//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use validator::Validate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Deserialize,Validate)]
#[sea_orm(table_name = "subjects_attendies")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[validate(email)]
    pub student_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub subject_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::assignments_marks::Entity")]
    AssignmentsMarks,
    #[sea_orm(has_many = "super::attended_meetings::Entity")]
    AttendedMeetings,
    #[sea_orm(
        belongs_to = "super::students::Entity",
        from = "Column::StudentId",
        to = "super::students::Column::Email",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Students,
    #[sea_orm(
        belongs_to = "super::subjects::Entity",
        from = "Column::SubjectId",
        to = "super::subjects::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Subjects,
}

impl Related<super::assignments_marks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssignmentsMarks.def()
    }
}

impl Related<super::attended_meetings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttendedMeetings.def()
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Students.def()
    }
}

impl Related<super::subjects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subjects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
