//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use validator::Validate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Deserialize,Validate)]
#[sea_orm(table_name = "assignments_marks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub assignment_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    #[validate(email)]
    pub student_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub subject_id: i32,
    #[sea_orm(column_type = "Float", nullable)]
    #[validate(range(exclusive_min = 0.0, max = 100.0))]
    pub mark: Option<f32>,
}



#[derive(Clone,Deserialize,Validate,DeriveIntoActiveModel)]
pub struct ModelId{
    pub assignment_id: i32,
    #[validate(email)]
    pub student_id: String, 
    pub subject_id: i32, 
}




#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::assignments::Entity",
        from = "Column::AssignmentId",
        to = "super::assignments::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Assignments,
    #[sea_orm(
        belongs_to = "super::subjects_attendies::Entity",
        from = "(Column::StudentId, Column::SubjectId)",
        to = "(super::subjects_attendies::Column::StudentId, super::subjects_attendies::Column::SubjectId)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SubjectsAttendies,
}

impl Related<super::assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Assignments.def()
    }
}

impl Related<super::subjects_attendies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubjectsAttendies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
