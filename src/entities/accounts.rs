//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use validator::Validate;
use crate::valid::validate_password;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Deserialize,Serialize,Validate)]
#[sea_orm(table_name = "accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    #[validate(email)]
    // #[sqlx(rename = "email")]
    pub email: String,
    #[validate(custom(function = "validate_password"))]
    pub password: String,
    #[validate(range(min = 0, max = 3))]
    pub role: i32,
}

#[derive(Deserialize,Validate)]
pub struct ModelPass{
    #[validate(custom(function = "validate_password"))]
    pub password: String
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::users::Entity")]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
